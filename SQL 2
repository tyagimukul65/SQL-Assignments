Q.51 Write an SQL query to report the name, population, and area of the big countries. Return the result table in any order.

>>> SELECT name, population, area 
  FROM world 
  WHERE area > 3000000 
  OR population > 25000000;

=======================================================================================================================================================================

Q.52 Write an SQL query to report the names of the customer that are not referred by the customer with id = 2. Return the result table in any order

>>> SELECT name 
  FROM customer 
  WHERE refree_id <> 2
  OR refree_id IS NULL;

=======================================================================================================================================================================

Q.53 Write an SQL query to report all customers who never order anything. Return the result table in any order.

>> SELECT name AS customers
  FROM customers
  WHERE id NOT IN (SELECT customer_id 
  FROM orders
  );

=======================================================================================================================================================================

Q.54 Write an SQL query to find the team size of each of the employees. Return result table in any order.

>> SELECT employee_id,
  count(*) OVER(PARTITION BY team_id) AS team_size
  FROM employee;

=======================================================================================================================================================================

Q.56 Write an SQL query to report the device that is first logged in for each player. Return the result table in any order.

>> SELECT player_id, device_id 
  FROM (SELECT player_id, device_id, event_date, 
  ROW_number() OVER(PARTITION BY player_id ORDER BY event_date) ranking 
  FROM activity) temp_activity
  WHERE ranking = 1;

=======================================================================================================================================================================

Q.57 Write an SQL query to find the customer_number for the customer who has placed the largest number of orders.

>>> WITH temp_orders AS (SELECT DISTINCT customer_number, 
			DENSE_RANK() OVER(ORDER BY total_orders DESC) AS ranking 
			FROM (SELECT customer_number, 
			COUNT(order_number) OVER(PARTITION BY customer_number) total_orders
			FROM orders)
      temp_cust_details
		  )
    SELECT customer_number
    FROM temp_orders
    WHERE ranking = 1;

=======================================================================================================================================================================

Q.58 Write an SQL query to report all the consecutive available seats in the cinema. Return the result table ordered by seat_id in ascending order.

>> SELECT DISTINCT c1.seat_id 
  FROM cinema c1
  INNER JOIN cinema c2
  ON ABS(c1.seat_id - c2.seat_id) = 1
  AND (c1.free = 1 AND c2.free = 1)
  ORDER BY c1.seat_id;

=======================================================================================================================================================================

Q.59 Write an SQL query to report the names of all the salespersons who did not have any orders related to the company with the name "RED".

>> SELECT name 
    FROM sales_person
    WHERE sales_id NOT IN (SELECT o.sales_id
    FROM orders o
    INNER JOIN company c 
    ON c.company_id = o.company_id
    WHERE c.name = 'RED'
    );

=======================================================================================================================================================================

Q.60 Write an SQL query to report for every three line segments whether they can form a triangle. Return the result table in any order.

>> SELECT *,
  CASE WHEN x + y > z AND y + z > x AND z + x > y
  THEN 'Yes'
  ELSE 'No'
  END as triangle
  FROM triangle;

=======================================================================================================================================================================

Q.61 Write an SQL query to report the shortest distance between any two points from the Point table

>> SELECT MIN(ABS(c1.x - c2.x)) AS shortest_distance
	FROM point c1
	INNER JOIN point c2
	WHERE c1.x!=c2.x;

=======================================================================================================================================================================

Q.62 Write a SQL query for a report that provides the pairs (actor_id, director_id) where the actor has cooperated with the director at least three times.

>>   SELECT actor_id, director_id
	FROM actor_director
	GROUP BY actor_id, director_id
	HAVING count(*) >= 3
	;

=======================================================================================================================================================================

Q.63 Write an SQL query that reports the product_name, year, and price for each sale_id in the Sales table. Return the resulting table in any order.

>>>  SELECT p.product_name, s.year, s.price
	FROM sales s
	INNER JOIN product p
	ON p.product_id = s.product_id;

=======================================================================================================================================================================

Q.64 Write an SQL query that reports the average experience years of all the employees for each project, rounded to 2 digits.

>> SELECT p.project_id,
  ROUND(avg(e.experience_years),2) AS average_years
  FROM project p
  INNER JOIN employee e ON p.employee_id = e. employee_id
  GROUP BY p.project_id
  ;

=======================================================================================================================================================================

Q.65 Write an SQL query that reports the best seller by total sales price, If there is a tie, report them all. Return the result table in any order.

>> WITH sales_rank AS(SELECT seller_id, sum(price) AS total_sales,
  DENSE_RANK() OVER(ORDER BY sum(price) DESC) rank_by_sales
  FROM sales
  GROUP BY seller_id)
  SELECT seller_id
  FROM sales_rank
  WHERE rank_by_sales = 1
  ;

=======================================================================================================================================================================

Q.66 Write an SQL query that reports the buyers who have bought S8 but not iPhone. Note that S8 and iPhone are products present in the Product table.

>>   SELECT s.buyer_id
	FROM sales s
	INNER JOIN product p
	ON p.product_id = s.product_id
	WHERE p.product_name = 'S8' 
	AND s.buyer_id NOT IN (SELECT s.buyer_id 
	FROM sales S 
	INNER JOIN product P 
	ON s.product_id = p.product_id 
	WHERE p.product_name = 'Iphone'
	);

=======================================================================================================================================================================

Q.67 Write an SQL query to compute the moving average of how much the customer paid in a seven days window (i.e., current day + 6 days before). average_amount should
	be rounded to two decimal places. Return result table ordered by visited_on in ascending order.
	
>> WITH daily_sales AS(SELECT visited_on,
	sum(amount) AS daily_sales_total_amount
	FROM customer
	GROUP BY visited_on
	)
	SELECT visited_on, sum(daily_sales_total_amount) 
	OVER(ORDER BY visited_on RANGE BETWEEN INTERVAL '6' day PRECEDING AND CURRENT ROW) AS amount,
	ROUND(avg(daily_sales_total_amount) 
	OVER(ORDER BY visited_on RANGE BETWEEN INTERVAL '6' day PRECEDING AND CURRENT ROW), 2) AS average_amount
	FROM daily_sales
	LIMIT 6;

=======================================================================================================================================================================

Q.68 Write an SQL query to find the total score for each gender on each day. Return the result table ordered by gender and day in ascending order.

>> SELECT gender, day,
  SUM(score_points) OVER(PARTITION BY gender ORDER BY day) AS total
  FROM scores
  ;

=======================================================================================================================================================================

Q.69 Write an SQL query to find the start and end number of continuous ranges in the table Logs. Return the result table ordered by start_id.

>> SELECT 
	MIN(log_id) AS start_id, 
	MAX(log_id) AS end_id 
FROM (SELECT log_id, DENSE_RANK() OVER(ORDER BY log_id - RN) AS ranking
FROM (SELECT log_id, ROW_number() OVER(ORDER BY log_id) AS RN
FROM logs) temp_log) temp_log2
GROUP BY ranking
ORDER BY start_id;

=======================================================================================================================================================================

Q.70 Write an SQL query to find the number of times each student attended each exam. Return the result table ordered by student_id and subject_name.

>>> SELECT st.student_id, st.student_name, sb.subject_name,
  SUM(CASE
      WHEN ex.subject_name IS NOT NULL
      THEN 1
      ELSE 0
    END) as attended_exams
FROM students st
  JOIN subjects sb
  LEFT JOIN examinations ex ON ex.subject_name = sb.subject_name
    AND st.student_id = ex.student_id
GROUP BY 
  st.student_id,
  st.student_name,
  sb.subject_name
ORDER BY
  st.student_id,
  st.student_name
;

=======================================================================================================================================================================

Q.72 Write an SQL query to find for each month and country, the number of transactions and their total amount, the number of approved transactions and their total
     amount. Return the result table in any order.

>>> SELECT DATE_FORMAT(trans_date, '%Y-%m') AS month, country,
  COUNT(*) AS trans_count,
  COUNT(CASE
      WHEN state = 'approved'
      THEN id
    END) AS approved_count,
  SUM(amount) AS trans_total_amount,
  SUM(CASE WHEN state = 'approved'
      THEN amount
    END
  ) AS approved_total_amount
FROM transactions
GROUP BY DATE_FORMAT(trans_date, '%Y-%m'), country
;

=======================================================================================================================================================================

Q.76 Write an SQL query to find the salaries of the employees after applying taxes. Round the salary to the nearest integer.
     The tax rate is calculated for each company based on the following criteria:
     ● 0% If the max salary of any employee in the company is less than $1000.
     ● 24% If the max salary of any employee in the company is in the range [1000, 10000] inclusive.
     ● 49% If the max salary of any employee in the company is greater than $10000.
    Return the result table in any order.

>>> WITH salaries_with_max_by_company AS (
	SELECT *, MAX(salary) OVER(PARTITION BY company_id) AS max_company_salary
	FROM salaries)
	SELECT company_id, employee_id, employee_name,
	CASE
	WHEN max_company_salary > 10000
	THEN
	CEILING(salary - (salary*0.49))
	WHEN max_company_salary >= 1000
	THEN
	CEILING(salary - (salary*0.24))
	ELSE salary
	END AS salary
	FROM salaries_with_max_by_company;

=======================================================================================================================================================================

Q.77 Write an SQL query to evaluate the boolean expressions in Expressions table. Return the result table in any order.

>>> SELECT e.left_operand, e.operator, e.right_operand,
	CASE
	WHEN e.operator = '<' THEN IF(l.value < r.value, 'TRUE', 'FALSE')
	WHEN e.operator = '>' THEN IF(l.value > r.value, 'TRUE', 'FALSE')
        ELSE IF(l.value = r.value, 'TRUE', 'FALSE')
	END AS result
	FROM expressions e
	JOIN variables l
	ON e.left_operand = l.name
	JOIN variables r
	ON e.right_operand = r.name;

=======================================================================================================================================================================

Q.79 Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

>>>   SELECT name 
	FROM employee 
	ORDER BY name;

=======================================================================================================================================================================

Q.80 Write a Query to obtain the year-on-year growth rate for the total spend of each product for each year.

>>> SELECT
  DATE_FORMAT(transaction_date,'%Y') AS year,
  product_id,
  spend AS curr_year_spend,
  LAG(spend) OVER(ORDER BY DATE_FORMAT(transaction_date,'%Y')) AS prev_year_spend,
  ROUND((spend - LAG(spend) OVER(ORDER BY DATE_FORMAT(transaction_date,'%Y')))
    *100.00/LAG(spend) OVER(ORDER BY DATE_FORMAT(transaction_date,'%Y')),2) AS yoy_rate
FROM user_transactions
ORDER BY year
;

=======================================================================================================================================================================

Q.81 Write a SQL Query to find the number of prime and non-prime items that can be stored in the 500,000 square feet warehouse. Output the item type and
	number of items to be stocked.

>>> WITH product_inventory_summary AS
(SELECT
    item_type,
    SUM(square_footage) as square_footage_required,
    COUNT(item_id) as unique_item_count,
    500000 as total_space,
    FLOOR(500000/sum(square_footage))*sum(square_footage) as space_used,
    FLOOR(500000/sum(square_footage))*COUNT(item_id) as item_count
  FROM 
    inventory
  GROUP BY 
    item_type
)
SELECT 
  t1.item_type,
  CASE
    WHEN t1.item_type = 'prime_eligible'
      THEN t1.item_count
    ELSE
      FLOOR((500000-t2.space_used)/t1.square_footage_required)*t1.unique_item_count
  END AS item_count
FROM
  product_inventory_summary t1
  JOIN product_inventory_summary t2 ON t1.item_type <> t2.item_type
ORDER BY t1.item_type DESC
;

=======================================================================================================================================================================

Q.82 Write a Query to report the median of searches made by a user. Round the median to one decimal point.

>>> SELECT
  CAST(DATE_FORMAT(curr_month_ua.event_date, '%m') AS UNSIGNED) AS month,
  count(distinct curr_month_ua.user_id) AS monthly_active_users
FROM 
  user_actions curr_month_ua
WHERE
  curr_month_ua.event_type IN ('sign-in', 'like', 'comment')
  AND DATE_FORMAT(curr_month_ua.event_date,'%Y-%m') = '2022-06'
  AND EXISTS(
    SELECT
      *
    FROM
      user_actions last_month_ua
    WHERE
      curr_month_ua.user_id = last_month_ua.user_id
      AND last_month_ua.event_type IN ('sign-in', 'like', 'comment')
      AND DATE_FORMAT(curr_month_ua.event_date, '%Y-%m') = 
        DATE_FORMAT(last_month_ua.event_date + INTERVAL '1' MONTH, '%Y-%m') 
  )
GROUP BY
  CAST(DATE_FORMAT(curr_month_ua.event_date, '%m') AS UNSIGNED)
;

=======================================================================================================================================================================

Q.84 Write a Query to update the Facebook advertisers status using the daily_pay table. Advertiser is a two-column table containing the user id and their payment
	status based on the last payment and daily_pay table has current information about their payment. Only advertisers who paid will show up in this table. Output the user
	id and current payment status sorted by the user id.

>>> SELECT user_id, 
      CASE
          WHEN user_id IN (SELECT user_id FROM daily_pay) THEN 'EXISTING'
          ELSE 'CHURN'
          END AS new_status
      FROM advertiser
   ORDER BY user_id;

=======================================================================================================================================================================

Q.85 Write a SQL Query that calculates the total time that the fleet of servers was running. The output should be in units of full days.

>>>  SELECT stop_time - start_time AS total_up_time
	FROM (SELECT SUM(CASE
	WHEN session_status = 'start' then EXTRACT(DAY from STR_TO_DATE(status_time, '%m/%d/%y'))
	END)
	AS start_time,
	SUM(CASE
		WHEN session_status = 'stop' then EXTRACT(DAY from STR_TO_DATE(status_time, '%m/%d/%y'))
		END) AS stop_time
	FROM server_utilization)
	temp_server_utilization;
	
=======================================================================================================================================================================

Q.86  Sometimes, payment transactions are repeated by accident; it could be due to user error, API failure or a retry error that causes a credit card to be charged
	twice. Using the transactions table, identify any payments made at the same merchant with the same credit card for the same amount within 10 minutes of each other.
	Count such repeated payments.
	
>>> WITH up_time_by_server AS (SELECT server_id, session_status, status_time,
    CASE
    WHEN session_status = 'stop'
    THEN
        TIMESTAMPDIFF(SECOND, LAG(status_time) OVER(PARTITION BY server_id ORDER BY status_time), status_time)/3600
  END as up_time
  FROM server_utilization)
	SELECT ROUND(sum(up_time)/24)
	FROM up_time_by_server
	WHERE up_time is NOT NULL;
	
=======================================================================================================================================================================

Q.87  Write a SQL Query to find the bad experience rate in the first 14 days for new users who signed up in June 2022. Output the percentage of bad experience rounded
	to 2 decimal places.

>>>  SELECT ROUND
	(SUM (CASE
              WHEN status !='completed successfully'  THEN 1 ELSE 0
              END)*100.0/count(*),2)  AS bad_experience_pct
	FROM 
		customers C
	INNER JOIN 
		orders O 
	ON 
		o.customer_id = c.customer_id
	WHERE 
        o.order_timestamp < date_add(STR_TO_date(signup_timestamp, '%m/%d/%Y'), INTERVAL 14 DAY) 
        AND 
        MONTH(STR_TO_date(signup_timestamp, '%m/%d/%Y')) = 06 
        AND 
        YEAR(STR_TO_date(signup_timestamp, '%m/%d/%Y')) = 2022;

=======================================================================================================================================================================

Q.88 Write an SQL query to find the total score for each gender on each day. Return the result table ordered by gender and day in ascending order.

>>> SELECT gender, day,
    SUM(score_points)
    OVER(PARTITION BY gender ORDER BY day)
    AS total
    FROM scores;

=======================================================================================================================================================================

Q.92 Write an SQL query to report for each install date, the number of players that installed the game on that day, and the day one retention.

>>> SELECT a.event_date AS install_date, 
        COUNT(a.player_id) AS installs, 
        ROUND(COUNT(b.player_id) / COUNT(a.player_id), 2) AS day1_retention
	FROM
        (SELECT player_id, MIN(event_date) AS event_date
         FROM activity 
         GROUP BY player_id) a
	LEFT JOIN activity b
	ON a.player_id = b.player_id 
	AND a.event_date + 1 = b.event_date
	GROUP BY a.event_date;

=======================================================================================================================================================================

Q.93








