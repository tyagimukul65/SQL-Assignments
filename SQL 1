#Q1. Query all columns for all American cities in the CITY table with populations larger than 100000.
     The CountryCode for America is USA.

>> select * from city where countrycode = 'USA' and population > 100000;

================================================================================================================================================================
#Q2. Query the NAME field for all American cities in the CITY table with populations larger than 120000.
     The CountryCode for America is USA.

>> select name from city where countrycode = 'USA' and population>120000;

================================================================================================================================================================
Q3. Query all columns (attributes) for every row in the CITY table.

>> select * from city;

================================================================================================================================================================
Q4. Query all columns for a city in CITY with the ID 1661.

>> select * from city where ID = 1661;

================================================================================================================================================================
Q5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is
JPN.

>> select * from city where countrycode = "JPN";

================================================================================================================================================================
Q6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is
JPN.

>> select name from city where countrycode = 'JPN';

================================================================================================================================================================
Q7. Query a list of CITY and STATE from the STATION table.

>> select city, states from station;

================================================================================================================================================================
Q8. Query a list of CITY names from STATION for cities that have an even ID number. Print the results
in any order, but exclude duplicates from the answer.

>> select distinct city from station where ID%2 = 0; 

================================================================================================================================================================
Q9. Find the difference between the total number of CITY entries in the table and the number of
distinct CITY entries in the table.

>> select (count(city) - count(distinct city)) as 'city_diff' from station;

================================================================================================================================================================
Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their
respective lengths (i.e.: number of characters in the name). If there is more than one smallest or
largest city, choose the one that comes first when ordered alphabetically.

>> SELECT CITY,LENGTH(CITY)AS MIN_LENGTH_OF_CITY FROM STATION ORDER BY LENGTH(CITY) ASC LIMIT 1;

SELECT CITY,LENGTH(CITY) AS MAX_LENGTH_OF_CITY FROM STATION ORDER BY LENGTH(CITY) DESC LIMIT 1;

================================================================================================================================================================

Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result
cannot contain duplicates.

>> SELECT distinct(CITY) FROM STATION
WHERE
    CITY like ("a%")
    OR CITY like ("e%")
    OR CITY like ("i%")
    OR CITY like ("o%")
    OR CITY like ("u%")
;
================================================================================================================================================================

Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot
contain duplicates.

>> SELECT distinct(CITY) FROM STATION
WHERE
    CITY like ("%a")
    OR CITY like ("%e")
    OR CITY like ("%i")
    OR CITY like ("%o")
    OR CITY like ("%u")
; 
================================================================================================================================================================

Q13. Query the list of CITY names from STATION that do not start with vowels. Your result cannot
contain duplicates.

>> SELECT distinct(CITY) FROM STATION
WHERE
    CITY not like ("%a")
    OR CITY not like ("%e")
    OR CITY not like ("%i")
    OR CITY not like ("%o")
    OR CITY not like ("%u")
;
================================================================================================================================================================

Q14. Query the list of CITY names from STATION that do not end with vowels. Your result cannot
contain duplicates.

>> SELECT distinct(CITY) FROM STATION
WHERE
    CITY not like ("a%")
    OR CITY not like ("e%")
    OR CITY not like ("i%")
    OR CITY not like ("o%")
    OR CITY not like ("u%")
;
================================================================================================================================================================

Q15. Query the list of CITY names from STATION that either do not start with vowels or do not end
with vowels. Your result cannot contain duplicates.

>> SELECT distinct CITY from STATION
where CITY not regexp '^[aeiou]' OR city not regexp '[aeiou]$';

================================================================================================================================================================

Q16. Query the list of CITY names from STATION that do not start with vowels and do not end with
vowels. Your result cannot contain duplicates.

>> SELECT distinct CITY from STATION
where CITY not regexp '^[aeiou]' AND city not regexp '[aeiou]$';

================================================================================================================================================================

Q17. Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is,
between 2019-01-01 and 2019-03-31 inclusive.

>> SELECT * from product WHERE product_id in (SELECT product_id FROM sales 
WHERE
    sale_date >= '2019-01-01' and sale_date <= "2019-03-31")
    ;
================================================================================================================================================================

Q18. Write an SQL query to find all the authors that viewed at least one of their own articles.
Return the result table sorted by id in ascending order.

>> select distinct author_id as id from Views where author_id = viewer_id order by author_id asc;

================================================================================================================================================================

Q19. Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal
places.

>> SELECT round(100*d2.immediate_orders/count(d1.delivery_id), 2) AS immediate_percentage
from Delivery d1,
    (SELECT count(order_date) AS immediate_orders
    from Delivery 
    WHERE (order_date = customer_pref_delivery_date)) d2;
    
================================================================================================================================================================








