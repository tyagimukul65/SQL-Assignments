#Q1. Query all columns for all American cities in the CITY table with populations larger than 100000.
     The CountryCode for America is USA.

>> select * from city where countrycode = 'USA' and population > 100000;

================================================================================================================================================================
#Q2. Query the NAME field for all American cities in the CITY table with populations larger than 120000.
     The CountryCode for America is USA.

>> select name from city where countrycode = 'USA' and population>120000;

================================================================================================================================================================
Q3. Query all columns (attributes) for every row in the CITY table.

>> select * from city;

================================================================================================================================================================
Q4. Query all columns for a city in CITY with the ID 1661.

>> select * from city where ID = 1661;

================================================================================================================================================================
Q5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is
JPN.

>> select * from city where countrycode = "JPN";

================================================================================================================================================================
Q6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is
JPN.

>> select name from city where countrycode = 'JPN';

================================================================================================================================================================
Q7. Query a list of CITY and STATE from the STATION table.

>> select city, states from station;

================================================================================================================================================================
Q8. Query a list of CITY names from STATION for cities that have an even ID number. Print the results
in any order, but exclude duplicates from the answer.

>> select distinct city from station where ID%2 = 0; 

================================================================================================================================================================
Q9. Find the difference between the total number of CITY entries in the table and the number of
distinct CITY entries in the table.

>> select (count(city) - count(distinct city)) as 'city_diff' from station;

================================================================================================================================================================
Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their
respective lengths (i.e.: number of characters in the name). If there is more than one smallest or
largest city, choose the one that comes first when ordered alphabetically.

>> SELECT CITY,LENGTH(CITY)AS MIN_LENGTH_OF_CITY FROM STATION ORDER BY LENGTH(CITY) ASC LIMIT 1;

SELECT CITY,LENGTH(CITY) AS MAX_LENGTH_OF_CITY FROM STATION ORDER BY LENGTH(CITY) DESC LIMIT 1;

================================================================================================================================================================

Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result
cannot contain duplicates.

>> SELECT distinct(CITY) FROM STATION
WHERE
    CITY like ("a%")
    OR CITY like ("e%")
    OR CITY like ("i%")
    OR CITY like ("o%")
    OR CITY like ("u%")
;
================================================================================================================================================================

Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot
contain duplicates.

>> SELECT distinct(CITY) FROM STATION
WHERE
    CITY like ("%a")
    OR CITY like ("%e")
    OR CITY like ("%i")
    OR CITY like ("%o")
    OR CITY like ("%u")
; 
================================================================================================================================================================

Q13. Query the list of CITY names from STATION that do not start with vowels. Your result cannot
contain duplicates.

>> SELECT distinct(CITY) FROM STATION
WHERE
    CITY not like ("%a")
    OR CITY not like ("%e")
    OR CITY not like ("%i")
    OR CITY not like ("%o")
    OR CITY not like ("%u")
;
================================================================================================================================================================

Q14. Query the list of CITY names from STATION that do not end with vowels. Your result cannot
contain duplicates.

>> SELECT distinct(CITY) FROM STATION
WHERE
    CITY not like ("a%")
    OR CITY not like ("e%")
    OR CITY not like ("i%")
    OR CITY not like ("o%")
    OR CITY not like ("u%")
;
================================================================================================================================================================

Q15. Query the list of CITY names from STATION that either do not start with vowels or do not end
with vowels. Your result cannot contain duplicates.

>> SELECT distinct CITY from STATION
where CITY not regexp '^[aeiou]' OR city not regexp '[aeiou]$';

================================================================================================================================================================

Q16. Query the list of CITY names from STATION that do not start with vowels and do not end with
vowels. Your result cannot contain duplicates.

>> SELECT distinct CITY from STATION
where CITY not regexp '^[aeiou]' AND city not regexp '[aeiou]$';

================================================================================================================================================================

Q17. Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is,
between 2019-01-01 and 2019-03-31 inclusive.

>> SELECT * from product WHERE product_id in (SELECT product_id FROM sales 
WHERE
    sale_date >= '2019-01-01' and sale_date <= "2019-03-31")
    ;
================================================================================================================================================================

Q18. Write an SQL query to find all the authors that viewed at least one of their own articles.
Return the result table sorted by id in ascending order.

>> select distinct author_id as id from Views where author_id = viewer_id order by author_id asc;

================================================================================================================================================================

Q19. Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal
places.

>> SELECT round(100*d2.immediate_orders/count(d1.delivery_id), 2) AS immediate_percentage
from Delivery d1,
    (SELECT count(order_date) AS immediate_orders
    from Delivery 
    WHERE (order_date = customer_pref_delivery_date)) d2;
    
================================================================================================================================================================

Q20. Write an SQL query to find the ctr of each Ad. Round ctr to two decimal points.
Return the result table ordered by ctr in descending order and by ad_id in ascending order in case of a
tie.

>> SELECT ad_id,
     CASE 
         WHEN (num_of_clicks * 100) / (num_of_clicks + num_of_views) IS NULL THEN 0
         ELSE ROUND((num_of_clicks * 100) / (num_of_clicks + num_of_views), 2)
         END AS ctr 
FROM 
	(SELECT ad_id,
	COUNT(CASE 
		WHEN action = 'CLICKED' THEN ad_id
		END
		) 	AS num_of_clicks, 
        
	COUNT(CASE WHEN action = 'VIEWED' THEN ad_id
	END)
 AS num_of_views FROM ads GROUP BY ad_id) temp_ads
ORDER BY ctr DESC, ad_id ASC;

================================================================================================================================================================

Q21. Write an SQL query to find the team size of each of the employees.
     Return result table in any order.
     
>> SELECT employee_id, COUNT(*)
   OVER(PARTITION BY team_id) AS team_size
   FROM employee;
   
 ================================================================================================================================================================

Q22. Write an SQL query to find the type of weather in each country for November 2019.
     The type of weather is:
     ● Cold if the average weather_state is less than or equal 15,
     ● Hot if the average weather_state is greater than or equal to 25, and
     ● Warm otherwise.
     Return result table in any order.
     
>> SELECT c.country_name,
          CASE
			WHEN AVG(weather_state) <= 15 THEN 'COLD'
			WHEN AVG(weather_state) >= 25 THEN 'HOT'
			ELSE 'WARM'
			END AS avg_weather
     FROM countries c INNER JOIN weather w
     ON c.country_id = w.country_id
     WHERE day BETWEEN '2019-11-01' AND '2019-11-30'
     GROUP BY c.country_id, c.country_name;

================================================================================================================================================================

Q23. Write an SQL query to find the average selling price for each product. average_price should be
     rounded to 2 decimal places. Return the result table in any order.
     
>> SELECT p.product_id,
  ROUND(SUM(up.units*p.price)/SUM(up.units), 2) AS average_price
  FROM units_sold up
  INNER JOIN prices p
  ON up.product_id = p.product_id
  AND up.purchase_date BETWEEN p.start_date AND p.end_date
GROUP BY p.product_id;

================================================================================================================================================================

Q24. Write an SQL query to report the first login date for each player.
     Return the result table in any order.

>> SELECT player_id, first_login
     FROM(SELECT player_id, event_date as first_login,
	ROW_NUMBER()
     OVER(PARTITION BY player_id ORDER BY event_date) ranking
	FROM activity) temp_activity
     WHERE ranking = 1;

================================================================================================================================================================

Q25. Write an SQL query to report the device that is first logged in for each player.
     Return the result table in any order.

>> SELECT player_id, device_id
     FROM(SELECT player_id, device_id,
     ROW_NUMBER()
     OVER(PARTITION BY player_id ORDER BY device_id) as ranking
	FROM activity)
     temp_activity
     WHERE ranking = 1;

================================================================================================================================================================

Q26. Write an SQL query to get the names of products that have at least 100 units ordered in February 2020
     and their amount.

>> SELECT p.product_name,
    SUM(o.unit) AS total_unit_sold
    FROM products p
    INNER JOIN orders o
    ON p.product_id = o.product_id
    WHERE order_date BETWEEN '2020-02-01' AND '2020-02-28'
    GROUP BY p.product_id
    HAVING SUM(o.unit) >= 100;

================================================================================================================================================================

Q27. Write an SQL query to find the users who have valid emails.
     A valid e-mail has a prefix name and a domain where:
     ● The prefix name is a string that may contain letters (upper or lower case), digits, underscore '_', period '.', and/or dash '-'.
     The prefix name must start with a letter.
     ● The domain is '@leetcode.com'.

>> SELECT user_id, name, mail
   FROM users
   WHERE mail LIKE '%@leetcode.com' AND mail REGEXP '^[a-zA-Z0-9][a-zA-Z0-9._-]*@[a-zA-Z0-9][a-zA-Z0-9._-]*\\.[a-zA-Z]{2,4}$';

================================================================================================================================================================

Q28. Write an SQL query to report the customer_id and customer_name of customers who have spent at least $100 in each month of June and July 2020.

>> SELECT customer_id, name
   FROM (
     SELECT c.customer_id,c.name,
     EXTRACT(MONTH FROM o.order_date) AS month_extracted,
     SUM(o.quantity * p.price) AS total_spent
     FROM orders o
     INNER JOIN customers c 
     ON c.customer_id = o.customer_id
     INNER JOIN products p
     ON p.product_id = o.product_id
     WHERE o.order_date BETWEEN '2020-06-01' AND '2020-07-31'
     GROUP BY c.customer_id,c.name, 
     EXTRACT(MONTH FROM o.order_date)
     ) temp_customers
        
WHERE total_spent >= 100
GROUP BY customer_id
HAVING COUNT(customer_id) = 2;

================================================================================================================================================================

Q29. Write an SQL query to report the distinct titles of the kid-friendly movies streamed in June 2020. Return the result table in any order.

>> SELECT DISTINCT c.title
FROM content c
INNER JOIN tv_program t
ON c.content_id = T.content_id
WHERE c.kids_content = 'Y' AND c.content_type = 'movies' 
AND T.program_date BETWEEN '2020-06-01' AND '2020-06-30';

================================================================================================================================================================

Q30. Write an SQL query to find the npv of each query of the Queries table.

>> SELECT DISTINCT n.id, n.year, n.npv
     FROM queries q
     INNER JOIN npv n
     ON n.id = q.id 
     AND n.year = q.year;

================================================================================================================================================================

Q31.

>> CREATE TABLE npv
(
  id INT,
  year INT,
  npv INT,
  CONSTRAINT pk_npv PRIMARY KEY(id, year)
);

CREATE TABLE queries
(
  id INT,
  year INT,
  CONSTRAINT pk_quereis PRIMARY KEY(id,year)
);

INSERT INTO npv VALUES(1, 2018, 100);
INSERT INTO npv VALUES(7, 2020, 30);
INSERT INTO npv VALUES(13, 2019, 40);
INSERT INTO npv VALUES(1, 2019, 113);
INSERT INTO npv VALUES(2, 2008, 121);
INSERT INTO npv VALUES(3, 2009, 12);
INSERT INTO npv VALUES(11, 2020, 99);
INSERT INTO npv VALUES(7, 2019, 0);

INSERT INTO queries VALUES(1, 2019);
INSERT INTO queries VALUES(2, 2008);
INSERT INTO queries VALUES(3, 2009);
INSERT INTO queries VALUES(7, 2018);
INSERT INTO queries VALUES(7, 2019);
INSERT INTO queries VALUES(7, 2020);
INSERT INTO queries VALUES(13, 2019);

>> SELECT 
   q.id,
   q.year, 
   ifnull(n.npv,0) as npv
   FROM queries AS q
   LEFT JOIN npv AS n ON q.id = n.id AND q.year = n.year;

================================================================================================================================================================

Q.32 Each row of this table contains the id and the corresponding unique id of an employee in the company.
     Write an SQL query to show the unique ID of each user, If a user does not have a unique ID replace just show null.

>> SELECT unique_id, name
   FROM Employees
   LEFT JOIN EmployeeUNI
   ON (Employees.id = EmployeeUNI.id, Employees.id, null);

================================================================================================================================================================

Q.33 Write an SQL query to report the distance travelled by each user. Return the result table ordered by travelled_distance in descending order, if two or more users
     travelled the same distance, order them by their name in ascending order.

>>>    select name, sum(if null(distance, 0)) as travelled_distance
	from Rides r
	right join Users u
	on r.user_id = u.id
	group by name
	order by 2 desc,1 asc;

================================================================================================================================================================

Q.34 Write an SQL query to get the names of products that have at least 100 units ordered in February 2020 and their amount.

>>>   SELECT a.product_name, SUM(unit) AS unit
	FROM Products a
	LEFT JOIN Orders b
	ON a.product_id = b.product_id
	WHERE b.order_date between '2020-02-01' and '2020-02-29'
	GROUP BY a.product_id
	HAVING SUM(unit) >= 100;

================================================================================================================================================================

Q.35 Write an SQL query to:
     ● Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
     ● Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.

>>> ● SELECT user_name AS results FROM
	(
	SELECT a.name AS user_name, COUNT(*) AS counts FROM MovieRating AS b
	    JOIN Users AS a
	    on a.user_id = b.user_id
	    GROUP BY b.user_id
	    ORDER BY counts DESC, user_name ASC LIMIT 1
	);
	
    ● SELECT movie_name AS results FROM
	(
	SELECT c.title AS movie_name, AVG(d.rating) AS rate FROM MovieRating AS d
	    JOIN Movies AS c
	    on c.movie_id = d.movie_id
	    WHERE substr(d.created_at, 1, 7) = '2020-02'
	    GROUP BY d.movie_id
	    ORDER BY rate DESC, movie_name ASC LIMIT 1
	)

================================================================================================================================================================

Q.36 Write an SQL query to report the distance travelled by each user. Return the result table ordered by travelled_distance in descending order, if two or more users
	travelled the same distance, order them by their name in ascending order

>>> SELECT u.name,
  SUM(CASE
    WHEN r.distance IS NULL THEN 0
    ELSE r.distance
  END) AS travelled_distance
FROM users u
  LEFT JOIN rides r ON u.id = r.user_id
GROUP BY u.id, u.name
ORDER BY
  travelled_distance DESC,
  u.name;

================================================================================================================================================================

Q.37 Write an SQL query to show the unique ID of each user, If a user does not have a unique ID replace just show null.

>>> SELECT eu.unique_id, e.name
   FROM employees e
   LEFT JOIN employee_uni eu ON e.id = eu.id
   ;

================================================================================================================================================================

Q.38 Write an SQL query to find the id and the name of all students who are enrolled in departments that no longer exist.

>>> SELECT s.id, s.name
	FROM students s
	LEFT JOIN departments d ON s.department_id = d.id
	WHERE
	d.id IS NULL;

================================================================================================================================================================

Q.39 Write an SQL query to report the number of calls and the total call duration between each pair of distinct persons (person1, person2) where person1 < person2.

>>> SELECT 
	CASE
	WHEN from_id < to_id THEN from_id 
        ELSE to_id 
        END AS person1,
   CASE
	WHEN from_id < to_id THEN to_id 
        ELSE from_id 
        END AS person2,
  COUNT(*) AS call_count,
	SUM(duration) AS total_duration
FROM calls
GROUP BY person1, person2;

================================================================================================================================================================

Q.40 Write an SQL query to find the average selling price for each product. average_price should be rounded to 2 decimal places. Return the result table in any order.

>>> SELECT p.product_id,
    ROUND(SUM(up.units*p.price)/SUM(up.units), 2) AS average_price
FROM units_sold up
  JOIN prices p ON up.product_id = p.product_id
    AND up.purchase_date BETWEEN p.start_date AND p.end_date
GROUP BY p.product_id;

================================================================================================================================================================

Q.41 Write an SQL query to report the number of cubic feet of volume the inventory occupies in each warehouse.

>>> SELECT w.name AS warehouse_name,
        SUM(p.length * p.width * p.height * w.units) AS volume
	FROM warehouse w
	INNER JOIN products p
	ON w.product_id = p.product_id
	GROUP BY w.name;

================================================================================================================================================================

Q.42 Write an SQL query to report the difference between the number of apples and oranges sold each day. Return the result table ordered by sale_date.

>>> SELECT sale_date,
        SUM( CASE
	WHEN fruit = 'APPLES' THEN sold_num
	WHEN fruit = 'ORANGES' THEN -sold_num
	END) AS difference
  FROM sales
  GROUP BY sale_date
  ORDER BY sale_date;

================================================================================================================================================================

Q.43 Write an SQL query to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places.
	In other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that
	number by the total number of players.
	
>>> WITH temp_activity AS (SELECT player_id,
	LEAD(event_date, 1) OVER(PARTITION BY player_id ORDER BY event_date)  - event_date  AS difference
	FROM activity)
	temp_activity2 AS (SELECT COUNT(DISTINCT player_id) AS players_count
	FROM temp_activity
	WHERE difference = 1
	GROUP BY player_id)

SELECT ROUND(COUNT(*) / (SELECT COUNT(DISTINCT player_id) FROM activity), 2) AS fraction
FROM temp_activity2;

================================================================================================================================================================

Q.44 Write an SQL query to report the managers with at least five direct reports. Return the result table in any order.

>>> SELECT name FROM employee 
	WHERE id = (SELECT manager_id
	FROM employee
	GROUP BY manager_id
	HAVING COUNT(manager_id) >= 5)
	;

================================================================================================================================================================

Q.45 Write an SQL query to report the respective department name and number of students majoring in each department for all departments in the Department table
	(even ones with no current students). Return the result table ordered by student_number in descending order. In case of a tie, order them by
	dept_name alphabetically.

>>> SELECT d.department_name,
	COUNT(s.student_id) AS number_of_students
	FROM department d
	LEFT JOIN student s
	ON d.dept_id = s.dept_id
	GROUP BY d.department_name
	ORDER BY number_of_students DESC,
        department_name;

================================================================================================================================================================

Q.46 Write an SQL query to report the customer ids from the Customer table that bought all the products in the Product table.

>>> SELECT customer_id
    FROM customer 
  GROUP BY customer_id
  HAVING COUNT(distinct product_key) = (SELECT COUNT(*) FROM product)
  ;

================================================================================================================================================================

Q.47 Write an SQL query that reports the most experienced employees in each project. In case of a tie, report all employees with the maximum number of experience years.

>>> SELECT p.project_id, e.employee_id
	FROM employee e
	INNER JOIN project p
	ON e.employee_id = p.employee_id
	WHERE e.experience_years = (SELECT MAX(experience_years)
	FROM employee);

================================================================================================================================================================

Q.48 Write an SQL query that reports the books that have sold less than 10 copies in the last year, excluding books that have been available for less than one
	month from today. Assume today is 2019-06-23.

>>> SELECT b.book_id, b.name
	FROM books b
	LEFT JOIN orders o
	ON b.book_id = o.book_id 
	WHERE available_from < '2019-05-23' 
	AND (o.dispatch_date BETWEEN '2018-06-23' AND '2019-06-23')
	OR dispatch_date IS NULL
	GROUP BY b.book_id, b.name
	HAVING COALESCE(SUM(o.quantity), 0) < 10;

================================================================================================================================================================


Q.49 Write a SQL query to find the highest grade with its corresponding course for each student. In case of a tie, you should find the course with the smallest
	course_id. Return the result table ordered by student_id in ascending order.

>>> SELECT student_id, course_id, grade 
	FROM (SELECT student_id, course_id, grade, 
	ROW_NUMBER() OVER(PARTITION BY student_id ORDER BY grade DESC) AS ranking
	FROM enrollments) temp_enrollments
	WHERE ranking = 1
	order by student_id;

================================================================================================================================================================

Q.50 Write an SQL query to find the winner in each group. Return the result table in any order.

>>> SELECT group_id, players as player_id
	FROM (SELECT p.group_id, 
	CASE
		WHEN first_player_goals > second_player_goals THEN first_player
		WHEN first_player_goals < second_player_goals THEN second_player
		WHEN first_player_goals = second_player_goals THEN IF(first_player < second_player, first_player, second_player)
	END AS players,
		MAX(IF(first_player_goals > second_player_goals, first_player_goals, second_player_goals)) AS goals,
		ROW_NUMBER() OVER(PARTITION BY team_id ORDER BY MAX(IF(first_player_goals > second_player_goals, first_player_goals, second_player_goals)) DESC) AS ranking
		FROM players p
		INNER JOIN matches m
		ON m.first_player = p.player_id 
		OR m.second_player = p.player_id
		GROUP BY p.group_id, players
		) temp_matches
	WHERE ranking = 1;



