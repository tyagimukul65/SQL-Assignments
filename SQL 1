#Q1. Query all columns for all American cities in the CITY table with populations larger than 100000.
     The CountryCode for America is USA.

>> select * from city where countrycode = 'USA' and population > 100000;

================================================================================================================================================================
#Q2. Query the NAME field for all American cities in the CITY table with populations larger than 120000.
     The CountryCode for America is USA.

>> select name from city where countrycode = 'USA' and population>120000;

================================================================================================================================================================
Q3. Query all columns (attributes) for every row in the CITY table.

>> select * from city;

================================================================================================================================================================
Q4. Query all columns for a city in CITY with the ID 1661.

>> select * from city where ID = 1661;

================================================================================================================================================================
Q5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is
JPN.

>> select * from city where countrycode = "JPN";

================================================================================================================================================================
Q6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is
JPN.

>> select name from city where countrycode = 'JPN';

================================================================================================================================================================
Q7. Query a list of CITY and STATE from the STATION table.

>> select city, states from station;

================================================================================================================================================================
Q8. Query a list of CITY names from STATION for cities that have an even ID number. Print the results
in any order, but exclude duplicates from the answer.

>> select distinct city from station where ID%2 = 0; 

================================================================================================================================================================
Q9. Find the difference between the total number of CITY entries in the table and the number of
distinct CITY entries in the table.

>> select (count(city) - count(distinct city)) as 'city_diff' from station;

================================================================================================================================================================
Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their
respective lengths (i.e.: number of characters in the name). If there is more than one smallest or
largest city, choose the one that comes first when ordered alphabetically.

>> SELECT CITY,LENGTH(CITY)AS MIN_LENGTH_OF_CITY FROM STATION ORDER BY LENGTH(CITY) ASC LIMIT 1;

SELECT CITY,LENGTH(CITY) AS MAX_LENGTH_OF_CITY FROM STATION ORDER BY LENGTH(CITY) DESC LIMIT 1;

================================================================================================================================================================

Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result
cannot contain duplicates.

>> SELECT distinct(CITY) FROM STATION
WHERE
    CITY like ("a%")
    OR CITY like ("e%")
    OR CITY like ("i%")
    OR CITY like ("o%")
    OR CITY like ("u%")
;
================================================================================================================================================================

Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot
contain duplicates.

>> SELECT distinct(CITY) FROM STATION
WHERE
    CITY like ("%a")
    OR CITY like ("%e")
    OR CITY like ("%i")
    OR CITY like ("%o")
    OR CITY like ("%u")
; 
================================================================================================================================================================

Q13. Query the list of CITY names from STATION that do not start with vowels. Your result cannot
contain duplicates.

>> SELECT distinct(CITY) FROM STATION
WHERE
    CITY not like ("%a")
    OR CITY not like ("%e")
    OR CITY not like ("%i")
    OR CITY not like ("%o")
    OR CITY not like ("%u")
;
================================================================================================================================================================

Q14. Query the list of CITY names from STATION that do not end with vowels. Your result cannot
contain duplicates.

>> SELECT distinct(CITY) FROM STATION
WHERE
    CITY not like ("a%")
    OR CITY not like ("e%")
    OR CITY not like ("i%")
    OR CITY not like ("o%")
    OR CITY not like ("u%")
;
================================================================================================================================================================

Q15. Query the list of CITY names from STATION that either do not start with vowels or do not end
with vowels. Your result cannot contain duplicates.

>> SELECT distinct CITY from STATION
where CITY not regexp '^[aeiou]' OR city not regexp '[aeiou]$';

================================================================================================================================================================

Q16. Query the list of CITY names from STATION that do not start with vowels and do not end with
vowels. Your result cannot contain duplicates.

>> SELECT distinct CITY from STATION
where CITY not regexp '^[aeiou]' AND city not regexp '[aeiou]$';

================================================================================================================================================================

Q17. Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is,
between 2019-01-01 and 2019-03-31 inclusive.

>> SELECT * from product WHERE product_id in (SELECT product_id FROM sales 
WHERE
    sale_date >= '2019-01-01' and sale_date <= "2019-03-31")
    ;
================================================================================================================================================================

Q18. Write an SQL query to find all the authors that viewed at least one of their own articles.
Return the result table sorted by id in ascending order.

>> select distinct author_id as id from Views where author_id = viewer_id order by author_id asc;

================================================================================================================================================================

Q19. Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal
places.

>> SELECT round(100*d2.immediate_orders/count(d1.delivery_id), 2) AS immediate_percentage
from Delivery d1,
    (SELECT count(order_date) AS immediate_orders
    from Delivery 
    WHERE (order_date = customer_pref_delivery_date)) d2;
    
================================================================================================================================================================

Q20. Write an SQL query to find the ctr of each Ad. Round ctr to two decimal points.
Return the result table ordered by ctr in descending order and by ad_id in ascending order in case of a
tie.

>> SELECT ad_id,
     CASE 
         WHEN (num_of_clicks * 100) / (num_of_clicks + num_of_views) IS NULL THEN 0
         ELSE ROUND((num_of_clicks * 100) / (num_of_clicks + num_of_views), 2)
         END AS ctr 
FROM 
	(SELECT ad_id,
	COUNT(CASE 
		WHEN action = 'CLICKED' THEN ad_id
		END
		) 	AS num_of_clicks, 
        
	COUNT(CASE WHEN action = 'VIEWED' THEN ad_id
	END)
 AS num_of_views FROM ads GROUP BY ad_id) temp_ads
ORDER BY ctr DESC, ad_id ASC;

================================================================================================================================================================

Q21. Write an SQL query to find the team size of each of the employees.
     Return result table in any order.
     
>> SELECT employee_id, COUNT(*)
   OVER(PARTITION BY team_id) AS team_size
   FROM employee;
   
 ================================================================================================================================================================

Q22. Write an SQL query to find the type of weather in each country for November 2019.
     The type of weather is:
     ● Cold if the average weather_state is less than or equal 15,
     ● Hot if the average weather_state is greater than or equal to 25, and
     ● Warm otherwise.
     Return result table in any order.
     
>> SELECT c.country_name,
          CASE
			WHEN AVG(weather_state) <= 15 THEN 'COLD'
			WHEN AVG(weather_state) >= 25 THEN 'HOT'
			ELSE 'WARM'
			END AS avg_weather
     FROM countries c INNER JOIN weather w
     ON c.country_id = w.country_id
     WHERE day BETWEEN '2019-11-01' AND '2019-11-30'
     GROUP BY c.country_id, c.country_name;

================================================================================================================================================================

Q23. Write an SQL query to find the average selling price for each product. average_price should be
     rounded to 2 decimal places. Return the result table in any order.
     
>> SELECT p.product_id,
  ROUND(SUM(up.units*p.price)/SUM(up.units), 2) AS average_price
  FROM units_sold up
  INNER JOIN prices p
  ON up.product_id = p.product_id
  AND up.purchase_date BETWEEN p.start_date AND p.end_date
GROUP BY p.product_id;

================================================================================================================================================================

Q24. Write an SQL query to report the first login date for each player.
     Return the result table in any order.

>> SELECT player_id, first_login
     FROM(SELECT player_id, event_date as first_login,
	ROW_NUMBER()
     OVER(PARTITION BY player_id ORDER BY event_date) ranking
	FROM activity) temp_activity
     WHERE ranking = 1;

================================================================================================================================================================

Q25. Write an SQL query to report the device that is first logged in for each player.
     Return the result table in any order.

>> SELECT player_id, device_id
     FROM(SELECT player_id, device_id,
     ROW_NUMBER()
     OVER(PARTITION BY player_id ORDER BY device_id) as ranking
	FROM activity)
     temp_activity
     WHERE ranking = 1;

================================================================================================================================================================

Q26. Write an SQL query to get the names of products that have at least 100 units ordered in February 2020
     and their amount.

>> SELECT p.product_name,
    SUM(o.unit) AS total_unit_sold
    FROM products p
    INNER JOIN orders o
    ON p.product_id = o.product_id
    WHERE order_date BETWEEN '2020-02-01' AND '2020-02-28'
    GROUP BY p.product_id
    HAVING SUM(o.unit) >= 100;

================================================================================================================================================================

Q27. Write an SQL query to find the users who have valid emails.
     A valid e-mail has a prefix name and a domain where:
     ● The prefix name is a string that may contain letters (upper or lower case), digits, underscore '_', period '.', and/or dash '-'.
     The prefix name must start with a letter.
     ● The domain is '@leetcode.com'.

>> SELECT user_id, name, mail
   FROM users
   WHERE mail LIKE '%@leetcode.com' AND mail REGEXP '^[a-zA-Z0-9][a-zA-Z0-9._-]*@[a-zA-Z0-9][a-zA-Z0-9._-]*\\.[a-zA-Z]{2,4}$';

================================================================================================================================================================

Q28. Write an SQL query to report the customer_id and customer_name of customers who have spent at least $100 in each month of June and July 2020.

>> SELECT customer_id, name
   FROM (
     SELECT c.customer_id,c.name,
     EXTRACT(MONTH FROM o.order_date) AS month_extracted,
     SUM(o.quantity * p.price) AS total_spent
     FROM orders o
     INNER JOIN customers c 
     ON c.customer_id = o.customer_id
     INNER JOIN products p
     ON p.product_id = o.product_id
     WHERE o.order_date BETWEEN '2020-06-01' AND '2020-07-31'
     GROUP BY c.customer_id,c.name, 
     EXTRACT(MONTH FROM o.order_date)
     ) temp_customers
        
WHERE total_spent >= 100
GROUP BY customer_id
HAVING COUNT(customer_id) = 2;

================================================================================================================================================================

Q29. Write an SQL query to report the distinct titles of the kid-friendly movies streamed in June 2020. Return the result table in any order.

>> SELECT DISTINCT c.title
FROM content c
INNER JOIN tv_program t
ON c.content_id = T.content_id
WHERE c.kids_content = 'Y' AND c.content_type = 'movies' 
AND T.program_date BETWEEN '2020-06-01' AND '2020-06-30';

================================================================================================================================================================

Q30. Write an SQL query to find the npv of each query of the Queries table.

>> SELECT DISTINCT n.id, n.year, n.npv
     FROM queries q
     INNER JOIN npv n
     ON n.id = q.id 
     AND n.year = q.year;

================================================================================================================================================================

Q31.



